summary
"The Python function get_data reads bank information from a data file. The required input parameter is the file path. The output parameter is a Python object with the bank information. The external function called is json.loads(). If the file does not exist, the function returns an empty dictionary."
"The Python function ""set_data"" writes bank information into a data file. The required input parameter is ""data"", which is the bank information to be written. The output parameter is not specified as the function only writes data to a file. The external function called is ""json.dumps"", which converts the data to a JSON string before writing to the file. The code also uses the constant variable ""FILE_PATH"", which should be a valid path to the file where the data will be written."
"The Python function get_users_as_list loads user data as a dictionary, converts it to a list, and appends an account number as a key to the resulting data object. The function expects no input parameters and returns a linked list of user data as its output parameter. The function called within this code is list_to_linked_list."
"The Python function ""list_to_linked_list"" converts a Python list into a linked list by creating a new node for each element in the input list and linking them together. The required input parameter is a Python list, and the output parameter is a linked list. The function uses the ""LinkedList"" class and its constructor to create new nodes and link them together."
"The Python function heap_sort is a custom implementation of the heap sort algorithm that takes in a list of data objects and a field to sort them based on. The function assumes the input list contains data objects and sorts them based on a common key on all those objects. The required input parameters are the input_list and the field to sort on. The output parameter is the sorted input list. The function calls two external functions, sift_down and swap, to complete the sorting process. The sift_down function is called twice within a loop, and the swap function is called once within the same loop to sort the list."
"The Python function swap takes a list and two elements within the list as input and swaps the positions of those two elements within the list. The required input parameters are the input_list, which is a list of elements, and variables a and b, which represent the two elements within the list to be swapped. The output parameter is the modified input_list with the swapped elements. The function calls the external function ""set_index"" to set the new indexes for the two swapped elements within the list."
"The Python function sift_down is a customized ""Sift Down"" function of the heap sort algorithm, which takes four input parameters: input_list (the list to be sorted), field (the object field to be sorted by), start_index (the starting index of the sublist to be sifted), and end_index (the ending index of the sublist to be sifted). The function sifts down a node in the heap to its correct position in the heap, by comparing its value with its children and swapping it with the larger child if applicable, until it reaches a leaf node or a node whose value is larger than its children. The function outputs nothing and calls an external function ""swap"" to swap nodes in the input_list."
"The Python function text_binary_search performs a custom binary search on a sorted list of objects. It assumes that the objects have a common field called ""field"" that can be used for sorting, and converts all text in that field to lowercase and trims it. The input parameters required are the sorted input_list, the common field to be sorted by, and the query to search for. The function returns the index of the first object that matches the query, or -1 if there are no matches. The function calls an external function make_text_searchable to prepare the query for searching."
The python function 'make_text_searchable' takes a string of text as input and outputs a lowercased version of the text with all spaces removed. It does not call any external functions. The required input parameter for this function is a string of text. The output parameter is also a string of text.
"The function generate_account_number generates a new unique account number for a bank. It requires no input parameters and returns a string of 16 digits, where the first 8 represent a bank prefix number (17172424) and the last 8 digits represent randomly generated numbers. The function uses the random python module to generate random numbers."
"The function ""perform_transaction"" moves money from one account to another by checking the account numbers and the balance of the sender account. Its required input parameters are the sender account number, the receiver account number, and the amount to be transferred. Its output parameters are None. External functions called through the code include ""get_data"" and ""set_data""."
"The python function update_information receives an account number and asks the user what information to change for that account (full name, gender, city or phone number). It then updates the information in the user data dictionary and calls the functions get_data(), set_data(), clean_terminal_screen() and display_account_information_by_given_account_number(). The required input parameter is the account number. The output parameter is None."
"The Python function ""create_new_user"" creates a new user profile with the given full name, balance, gender, city, and phone number. The required input parameters are: ""full_name"", ""balance"", ""gender"", ""city"", and ""phone_number"". The function uses the external functions ""get_data()"", ""generate_account_number()"", ""set_data()"", and ""display_account_information_by_given_account_number(account_number)"". The output parameter is the user account number."
"The function search_account searches a user's account by querying a specific field in the data. The required input parameters are 'field' and 'query', which represent the field to be searched and the keyword to search for. The function calls the external functions 'get_users_as_list()', 'heap_sort()', 'text_binary_search()', and 'display_user_object()'. The output parameters are not explicitly defined, as the function either prints an error message or displays the user's account information."
"The Python function ""delete_account"" deletes an existing account with the provided account number. At first, the function calls an external function called ""get_data"", which retrieves account data of all users. If the provided account number is not listed in the account data, the function displays an error message and returns. If the account number exists, the function deletes the account number from the user's account data and calls an external function ""set_data"" to update the account data after deletion. Lastly, the function prints a message confirming the account number's removal. 

Input parameters: account_number (as a string).

Output parameters: None.

External functions called: get_data(), set_data()."
The function clean_terminal_screen clears the terminal screen by executing the system clear command. It takes no input parameters and has no output parameters. It calls the external function os.system to execute the command appropriate for either Windows or UNIX operating systems.
"The python function ""print_horizontal_line"" simply prints a decorative horizontal line. It does not have any input parameters or output parameters. No external functions are called through the code."
"The Python function ""display_account_information_by_given_account_number"" displays information about a user's account based on the account number provided as input. It requires the account number as input and displays the user object and account number as output. It calls an external function ""get_data"" to retrieve user data and ""display_user_object"" to display information about the user object."
"The Python function display_user_object takes in two input parameters: user_object (a dictionary containing user information) and account_number (an account number associated with the user). It then prints the user object information, including the full name, account number, account creation date, balance, gender, city, and phone number. The function does not require any external functions. The output of this function is the printed user object information."
"The Python function ""display_all_accounts_sorted_by"" displays all user accounts one after the other, sorted by a given field. It requires one input parameter (field) which indicates the field by which the users will be sorted. The output parameter is a display of all the user accounts sorted by the specified field. 
The function calls two external functions: ""get_users_as_list"" and ""heap_sort"". Additionally, it uses the function ""clean_terminal_screen"" and calls the function ""display_user_object"" to display each user account."
"The Python function beautify_field_name takes a field name as its input parameter and returns the corresponding human-readable field name as its output. It requires one input parameter ""field"" and returns one output parameter ""beautified_field_name"". The function does not call any external functions. If the input parameter does not match any of the predefined fields, the function returns ""Unknown""."
The Python function 'ask_user_what_field_to_sort_the_display_by' shows a menu to the user to select a field by which to sort data. The required input parameter is the user's selection from the displayed menu. The output parameter is the string name of the selected field. This function does not call any external functions.
"The Python function ""display_menu"" displays a menu on the screen and prompts the user to enter a command. Depending on the user's choice, the function calls a corresponding external function to perform a task such as creating a new user, transaction, updating account information, deleting an account, or searching for an account. The required input parameter is the user's choice entered through input(). There are no output parameters. The external functions called in this code are ""clean_terminal_screen(), create_new_user(), perform_transaction(), update_information(), delete_account(), search_account(), ask_user_what_field_to_sort_the_display_by(), display_all_accounts_sorted_by(), beatify_field_name()""."
